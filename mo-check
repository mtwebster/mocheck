#!/usr/bin/env python

import polib
import sys
import os
from gi.repository import Gtk, GObject, GLib, Pango

tokentypes = ["%d", "%s", "%B", "%'d"]


class Mo:
    def __init__(self, inst, locale):
        self.mofile = inst
        self.locale = locale
        self.bad_entries = []

class Main:
    def __init__(self):
        self.check_files()
        self.builder = Gtk.Builder()
        self.builder.add_from_file("/home/mtwebster/bin/mocheck/mocheck.glade")
        self.treebox = self.builder.get_object("treebox")
        self.window = self.builder.get_object("window")
        self.refresh_button = self.builder.get_object("refresh")
        self.window.connect("destroy", Gtk.main_quit)

        self.refresh_button.connect("clicked", self.on_refresh_clicked)

        self.treeview = Gtk.TreeView()
        self.treeview.set_rules_hint(True)
        column = Gtk.TreeViewColumn("Language", Gtk.CellRendererText(), markup=1)
        self.treeview.append_column(column)

        cr = Gtk.CellRendererText()
        column = Gtk.TreeViewColumn("MsgId", cr, markup=2)
        cr.set_property('wrap-mode', Pango.WrapMode.WORD_CHAR)
        cr.set_property('wrap-width', 500)
        self.treeview.append_column(column)

        cr = Gtk.CellRendererText()
        column = Gtk.TreeViewColumn("MsgStr", cr, markup=3)
        cr.set_property('wrap-mode', Pango.WrapMode.WORD_CHAR)
        cr.set_property('wrap-width', 500)
        self.treeview.append_column(column)

        self.treebox.pack_start(self.treeview, True, True, 2)

        self.refresh_model()

        self.window.show_all()


    def on_refresh_clicked(self, button):
        self.check_files()
        self.refresh_model()

    def refresh_model(self):
        self.model = Gtk.TreeStore(object, str, str, str)
        for mo in self.bad_mos:
            for entry in mo.bad_entries:
                iter = self.model.insert_before(None, None)
                self.model.set_value(iter, 0, mo)
                self.model.set_value(iter, 1, mo.locale)
                self.model.set_value(iter, 2, entry.msgid)
                self.model.set_value(iter, 3, entry.msgstr)
        self.treeview.set_model(self.model)

    def check_files(self):
        self.bad_mos = []
        for root, subFolders, files in os.walk(os.getcwd(),topdown=False):
            for file in files:
                if file.endswith(".mo"):
                    path, junk = os.path.split(root)
                    path, locale = os.path.split(path)
                    mo_inst = polib.mofile(os.path.join(root, file))
                    mo = Mo(mo_inst, locale)
                    path, junk = os.path.split(root)
                    path, locale = os.path.split(path)
                    for entry in mo_inst:
                        id_tokens = []
                        str_tokens = []
                        msgid = entry.msgid
                        msgstr = entry.msgstr

                        for idx in range(len(msgid)):
                            if msgid[idx] == "%":
                                for tt in tokentypes:
                                    if msgid[idx:idx+len(tt)] == tt:
                                        id_tokens.append(tt)

                        for idx in range(len(msgstr)):
                            if msgstr[idx] == "%":
                                for tt in tokentypes:
                                    if msgstr[idx:idx+len(tt)] == tt:
                                        str_tokens.append(tt)

                        if msgstr != "":
                            if (len(id_tokens) != len(str_tokens)):
                                print "%s: Error: Number of tokens does not match: " % (locale), entry.msgid, "  ...  ", entry.msgstr
                                self.register_bad(mo, entry)
                            else:
                                for j in range(len(id_tokens)):
                                    if id_tokens[j] != str_tokens[j]:
                                        print "%s: Error: tokens not in correct order: " % (locale), entry.msgid, "  ...  ", entry.msgstr
                                        self.register_bad(mo, entry)

    def register_bad(self, mo, entry):
        if mo not in self.bad_mos:
            self.bad_mos.append(mo)
        if entry not in mo.bad_entries:
            mo.bad_entries.append(entry)

if __name__ == "__main__":
    GObject.threads_init()
    Main()
    Gtk.main()
